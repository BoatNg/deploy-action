{"version":3,"file":"index.js","sources":["../src/utils/log.ts","../src/deploy.ts","../src/index.ts"],"sourcesContent":["import * as core from '@actions/core'\nimport * as os from 'os'\nimport * as chalk from 'chalk'\n\nexport interface Log {\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string | Error): void;\n\n}\nconst NAME: string = '[deploy-actino]'\nconst infoWrap = chalk.bold.green\nconst warnWrap = chalk.keyword('orange');\nconst errorWrap = chalk.bold.red;\n\nexport function info(message, ...arg): void {\n  let msg = `${NAME}: ${message} ${os.EOL}`\n  msg = infoWrap(msg)\n  console.log(msg, ...arg)\n}\n\nexport function warn(message, ...arg): void {\n  let msg = `${NAME}::Warn:: ${message} ${os.EOL}`\n  msg = warnWrap(msg)\n  console.warn(msg, ...arg)\n}\n\nexport function error(message, ...arg): void {\n  let msg = `${NAME}::Error:: ${message} ${os.EOL}`\n  let msgWrap = errorWrap(msg)\n  console.error(msgWrap, ...arg)\n  core.setFailed(msg)\n}\n\nconst log: Log = {\n  info,\n  warn,\n  error,\n}\n\nexport default log","import log from 'utils/log'\nimport * as core from '@actions/core'\nimport * as github from '@actions/github'\n\nexport default function (): void {\n\n  // init\n  try {\n\n    // 1. get input\n    log.info('get input begin')\n    // `who-to-greet` input defined in action metadata file\n    const nameToGreet = core.getInput('who-to-greet');\n    log.info(`Hello ${nameToGreet}!`);\n    const time = (new Date()).toTimeString();\n    core.setOutput(\"time\", time);\n    // Get the JSON webhook payload for the event that triggered the workflow\n    const payload = JSON.stringify(github.context.payload, undefined, 2)\n    log.warn(`The event payload: ${payload}`);\n    // 2. validate input\n\n    // 3. connet ssh\n\n    // 4. put file\n\n    // successs\n  } catch (err) {\n    log.error(err)\n  }\n\n}","import deploy from './deploy'\n\ndeploy()"],"names":["chalk.bold","chalk.keyword","os.EOL","core.setFailed","core.getInput","core.setOutput","github.context"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAM,IAAI,GAAW,iBAAiB,CAAA;AACtC,IAAM,QAAQ,GAAGA,UAAU,CAAC,KAAK,CAAA;AACjC,IAAM,QAAQ,GAAGC,aAAa,CAAC,QAAQ,CAAC,CAAC;AACzC,IAAM,SAAS,GAAGD,UAAU,CAAC,GAAG,CAAC;SAEjB,IAAI,CAAC,OAAO;;;IAAE,aAAM;SAAN,UAAM,EAAN,qBAAM,EAAN,IAAM;QAAN,8BAAM;;IAClC,IAAI,GAAG,GAAM,IAAI,UAAK,OAAO,SAAIE,MAAQ,CAAA;IACzC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAA;IACnB,OAAO,CAAC,GAAG,OAAX,OAAO,kBAAK,GAAG,GAAK,GAAG,GAAC;AAC1B,CAAC;SAEe,IAAI,CAAC,OAAO;;;IAAE,aAAM;SAAN,UAAM,EAAN,qBAAM,EAAN,IAAM;QAAN,8BAAM;;IAClC,IAAI,GAAG,GAAM,IAAI,iBAAY,OAAO,SAAIA,MAAQ,CAAA;IAChD,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAA;IACnB,OAAO,CAAC,IAAI,OAAZ,OAAO,kBAAM,GAAG,GAAK,GAAG,GAAC;AAC3B,CAAC;SAEe,KAAK,CAAC,OAAO;;;IAAE,aAAM;SAAN,UAAM,EAAN,qBAAM,EAAN,IAAM;QAAN,8BAAM;;IACnC,IAAI,GAAG,GAAM,IAAI,kBAAa,OAAO,SAAIA,MAAQ,CAAA;IACjD,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;IAC5B,OAAO,CAAC,KAAK,OAAb,OAAO,kBAAO,OAAO,GAAK,GAAG,GAAC;IAC9BC,cAAc,CAAC,GAAG,CAAC,CAAA;AACrB,CAAC;AAED,IAAM,GAAG,GAAQ;IACf,IAAI,MAAA;IACJ,IAAI,MAAA;IACJ,KAAK,OAAA;CACN;;;;IC/BC,IAAI;;QAGF,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;;QAE3B,IAAM,WAAW,GAAGC,aAAa,CAAC,cAAc,CAAC,CAAC;QAClD,GAAG,CAAC,IAAI,CAAC,WAAS,WAAW,MAAG,CAAC,CAAC;QAClC,IAAM,IAAI,GAAG,CAAC,IAAI,IAAI,EAAE,EAAE,YAAY,EAAE,CAAC;QACzCC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;;QAE7B,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAACC,cAAc,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAA;QACpE,GAAG,CAAC,IAAI,CAAC,wBAAsB,OAAS,CAAC,CAAC;;;;;KAQ3C;IAAC,OAAO,GAAG,EAAE;QACZ,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;KACf;AAEH;;AC5BA,MAAM,EAAE"}